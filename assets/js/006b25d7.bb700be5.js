"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:9},i="Lists",o={unversionedId:"graphql-schema-types/lists",id:"graphql-schema-types/lists",title:"Lists",description:"GraphQLListType allows you to represent a collection of values.",source:"@site/docs/graphql-schema-types/lists.md",sourceDirName:"graphql-schema-types",slug:"/graphql-schema-types/lists",permalink:"/leto/docs/graphql-schema-types/lists",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Non-Nullable",permalink:"/leto/docs/graphql-schema-types/non-nullable"},next:{title:"Abstract Types",permalink:"/leto/docs/graphql-schema-types/abstract-types"}},p={},s=[{value:"Example  omit in toc ",id:"example--omit-in-toc-",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lists"},"Lists"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLListType")," allows you to represent a collection of values."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-List"},"GraphQL Specification")),(0,a.kt)("p",null,"This values can be of any ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLType")," and List types can be Output or Input Types if the Wrapped type is an Output or Input type. For example, a List of Union types is an Output type while a List of Strings (scalar types) can be an Output or Input type. You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"<type>.list()")," method present in each ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLType")," or the ",(0,a.kt)("inlineCode",{parentName:"p"},"listOf(<type>)")," global utility function to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLListType"),". For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"graphQLString.list()")," will be a ",(0,a.kt)("inlineCode",{parentName:"p"},"[String]")," in GraphQL."),(0,a.kt)("h3",{id:"example--omit-in-toc-"},"Example "),(0,a.kt)("p",null,"In GraphQL, you can represent it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type Model {\n  listField(listInput: [String]!): [InterfaceModel!]\n}\n\ninterface InterfaceModel {\n  name: String\n}\n")),(0,a.kt)("p",null,"Using Dart:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:leto_schema/leto_schema.dart';\n\nabstract class InterfaceModel {\n  String get name;\n}\n\nclass Model {\n  List<InterfaceModel>? list(List<String?> listInput) {\n    throw Unimplemented();\n  }\n}\n\nfinal interfaceModel = objectType<InterfaceModel>(\n  'InterfaceModel',\n  fields: [\n    graphQLString.field(\n      'name',\n      resolve: (InterfaceModel obj, Ctx ctx) => obj.name,\n    )\n  ],\n  isInterface: true,\n);\n\nfinal model = objectType<Model>(\n  'Model',\n  fields: [\n    interfaceModel.nonNull().list().field(\n      'listField',\n      inputs: [\n        listOf(graphQLString).nonNull().inputField('listInput'),\n      ],\n      resolve: (Model obj, Ctx ctx) => \n        obj.listField(ctx.args['listInput'] as List<String?>) \n    )\n  ]\n);\n\n")),(0,a.kt)("p",null,"With code generation, you just annotate the different classes with ",(0,a.kt)("inlineCode",{parentName:"p"},"@GraphQLObject()")," (or the expected annotation) and the fields and models containing Dart Lists or non-nullable types will be generated using ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLListType")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLNonNullType")," as required."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:leto_schema/leto_schema.dart';\n\n@GraphQLObject()\nabstract class InterfaceModel {\n  String get name;\n}\n\n@GraphQLObject()\nclass Model {\n  List<InterfaceModel>? list(List<String?> listInput) {\n    throw Unimplemented();\n  }\n}\n")))}u.isMDXComponent=!0}}]);