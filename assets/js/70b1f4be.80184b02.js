"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[996],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=a,h=m["".concat(p,".").concat(c)]||m[c]||u[c]||o;return n?i.createElement(h,r(r({ref:t},d),{},{components:n})):i.createElement(h,r({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const o={sidebar_position:8},r="Validation",l={unversionedId:"main/validation",id:"main/validation",title:"Validation",description:"Schema Validation",source:"@site/docs/main/validation.md",sourceDirName:"main",slug:"/main/validation",permalink:"/leto/docs/main/validation",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Resolvers",permalink:"/leto/docs/main/resolvers"},next:{title:"Miscellaneous",permalink:"/leto/docs/main/miscellaneous"}},p={},s=[{value:"Schema Validation",id:"schema-validation",level:2},{value:"Document Validation",id:"document-validation",level:2},{value:"Query Complexity",id:"query-complexity",level:2},{value:"Skip validation with Persisted Queries",id:"skip-validation-with-persisted-queries",level:2},{value:"Input Validation",id:"input-validation",level:2}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validation"},"Validation"),(0,a.kt)("h2",{id:"schema-validation"},"Schema Validation"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Type-System"},"GraphQL Specification")),(0,a.kt)("p",null,'Implements the "Type Validation" sub-sections of the specification\'s "Type System" section.'),(0,a.kt)("p",null,"Guaranties that the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," instance is valid, verifies the Type System validations in the specification. For example, an Object field's type can only be an Output Type or an Union should have at least one possible type and all of them have to be Object types."),(0,a.kt)("p",null,"This will be executed before stating a GraphQL server. Leto implements all of the Specification's schema validation. The code for all rules can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/validate/validate_schema.dart"},"validate_schema.dart")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),"."),(0,a.kt)("h2",{id:"document-validation"},"Document Validation"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Validation"},"GraphQL Specification")),(0,a.kt)("p",null,"This will be executed before executing any request. Leto implements all of the Specification's document validation. The code for all rules can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/validate"},"validate")," folder in ",(0,a.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),"."),(0,a.kt)("p",null,"You can add custom validation rules to a server with the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL.customValidationRules")," parameter, they will be added on top of the ",(0,a.kt)("inlineCode",{parentName:"p"},"specifiedValidationRules"),". One example of a custom validation rule is the ",(0,a.kt)("a",{parentName:"p",href:"/leto/docs/main/validation#query-complexity"},"Query Complexity")," validation."),(0,a.kt)("h2",{id:"query-complexity"},"Query Complexity"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/test/validation/query_complexity_test.dart"},"Tests")),(0,a.kt)("p",null,"This document validation rule allows you to restrict the complexity of a GraphQL request."),(0,a.kt)("p",null,"The provided ",(0,a.kt)("inlineCode",{parentName:"p"},"queryComplexityRuleBuilder")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationRule")," that reports errors when the ",(0,a.kt)("inlineCode",{parentName:"p"},"maxComplexity")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"maxDepth")," configuration parameters are reached."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxComplexity"))),(0,a.kt)("p",null,"Specifies the maximum complexity for a given operation. The complexity is measured based on the selected fields and should be. If this complexity is surpassed (is greater) a validation error will be reported."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxDepth"))),(0,a.kt)("p",null,"Specifies the maximum depth for a given operation. The depth is defined as the number of objects (including the root operation object) that have to be traversed to arrive to a given field. If this depth is surpassed (is greater) a validation error will be reported."),(0,a.kt)("p",null,"The complexity for each fieldNode is given by:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"complexity = fieldComplexity + (childrenComplexity + fieldTypeComplexity) * complexityMultiplier")),(0,a.kt)("p",null,"Where fieldComplexity is the ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementComplexity")," in\n",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLObjectField.attachments")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultFieldComplexity"),"\nif there aren't any."),(0,a.kt)("p",null,"childrenComplexity is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"scalar or enum (leaf types): 0"),(0,a.kt)("li",{parentName:"ul"},"object or interface: sum(objectFieldsComplexities)"),(0,a.kt)("li",{parentName:"ul"},"union: max(possibleTypesComplexities)")),(0,a.kt)("p",null,"fieldTypeComplexity will be taken as the ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementComplexity"),"\nfrom ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLNamedType.attachments")," or 0 if there aren't any."),(0,a.kt)("p",null,"If the fieldType is a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLListType"),", complexityMultiplier\nwill be the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"listComplexityMultiplier"),", otherwise 1."),(0,a.kt)("h2",{id:"skip-validation-with-persisted-queries"},"Skip validation with Persisted Queries"),(0,a.kt)("p",null,"TODO: 1A"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistedQueriesExtensions")," you can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"skipValidation")," parameter so that the validation is skipped for already cached (and validated) documents."),(0,a.kt)("h2",{id:"input-validation"},"Input Validation"),(0,a.kt)("p",null,"Input validation refers to the verification of the values or structure of the payload sent as input in a request. It could, of coursed, be performed manually before the execution of each request. However, we provide a couple of tools to help with the process, in particular using code generation and the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/valida"},(0,a.kt)("inlineCode",{parentName:"a"},"valida")," package"),"."),(0,a.kt)("p",null,"The following example shows an input object ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectionArguments")," with the annotations ",(0,a.kt)("inlineCode",{parentName:"p"},"@Valida()")," and its fields ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"last")," with the annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"@ValidaNum(min: 1)"),". If the ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectionArguments")," object is used as input in a resolver, the validation is performed over the input value on execution and an error will be thrown if either ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"last")," are less than 1. For more information on the supported annotations and validations, view the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/valida"},(0,a.kt)("inlineCode",{parentName:"a"},"valida")," package"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@JsonSerializable()\n@Valida()\n@GraphQLInput()\nclass ConnectionArguments {\n  /// Returns the items in the list that come before the specified cursor.\n  final String? before;\n\n  /// Returns the items in the list that come after the specified cursor.\n  final String? after;\n\n  /// Returns the first n items from the list.\n  @ValidaNum(min: 1)\n  final int? first;\n\n  /// Returns the last n items from the list.\n  @ValidaNum(min: 1)\n  final int? last;\n\n  const ConnectionArguments({\n    this.before,\n    this.after,\n    this.first,\n    this.last,\n  });\n\n  factory ConnectionArguments.fromJson(Map<String, Object?> json) =>\n      _$ConnectionArgumentsFromJson(json);\n\n  Map<String, Object?> toJson() => _$ConnectionArgumentsToJson(this);\n}\n")))}u.isMDXComponent=!0}}]);