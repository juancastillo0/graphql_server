"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5152],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(h,i(i({ref:n},u),{},{components:t})):a.createElement(h,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:4},i="Annotations (Decorators)",l={unversionedId:"leto_generator/annotations-decorators",id:"leto_generator/annotations-decorators",title:"Annotations (Decorators)",description:"All annotations with documentation and the supported configuration parameters can be found in  package:letoschema's decorators file.",source:"@site/docs/leto_generator/annotations-decorators.md",sourceDirName:"leto_generator",slug:"/leto_generator/annotations-decorators",permalink:"/leto/docs/leto_generator/annotations-decorators",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_generator/README.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/leto/docs/leto_generator/examples"},next:{title:"Dart Type to GraphQLType coercion",permalink:"/leto/docs/leto_generator/dart-type-to-graphqltype-coercion"}},s={},p=[{value:"Outputs",id:"outputs",level:2},{value:"GraphQLObject",id:"graphqlobject",level:3},{value:"GraphQLField",id:"graphqlfield",level:3},{value:"Interfaces",id:"interfaces",level:4},{value:"GraphQLUnion",id:"graphqlunion",level:3},{value:"Inputs",id:"inputs",level:2},{value:"GraphQLInput",id:"graphqlinput",level:3},{value:"GraphQLArg",id:"graphqlarg",level:3},{value:"Resolver Inputs",id:"resolver-inputs",level:3},{value:"Other",id:"other",level:2},{value:"GraphQLDocumentation",id:"graphqldocumentation",level:3},{value:"GraphQLEnum",id:"graphqlenum",level:3},{value:"AttachFn",id:"attachfn",level:3},{value:"Generics",id:"generics",level:3},{value:"Generics Input",id:"generics-input",level:4}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"annotations-decorators"},"Annotations (Decorators)"),(0,r.kt)("p",null,"All annotations with documentation and the supported configuration parameters can be found in  ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto_schema/lib/src/decorators.dart"},"decorators file"),"."),(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("p",null,"Annotations for GraphQL Output Types."),(0,r.kt)("h3",{id:"graphqlobject"},"GraphQLObject"),(0,r.kt)("p",null,"Generate ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),"s and Interfaces with this annotation. The constructor provides a couple of parameters to configure the generated fields. "),(0,r.kt)("h3",{id:"graphqlfield"},"GraphQLField"),(0,r.kt)("p",null,"Configures the generation of a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectField")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),"."),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"omitFields")," parameter is used to omit all fields by default from the generation. Also an usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaces")," parameter is shown, a better approach for specifying interfaces is shown in the ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/annotations-decorators#interfaces"},"Interfaces section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final customInterface = objectType<Object>(\n  'ClassConfig2Interface',\n  fields: [\n    graphQLString.nonNull().field('value'),\n  ],\n  isInterface: true,\n);\n\n@GraphQLObject(omitFields: true, interfaces: ['customInterface'])\nclass ClassConfig2 {\n  @GraphQLField()\n  final String value;\n  @GraphQLField(nullable: true)\n  final String valueOverridden;\n  final String notFound;\n  @GraphQLField(name: 'renamedValue2')\n  final String value2;\n\n  const ClassConfig2({\n    required this.value,\n    required this.valueOverridden,\n    required this.notFound,\n    required this.value2,\n  });\n}\n")),(0,r.kt)("p",null,"Fields annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLField()")," will appear in the type definition, but ",(0,r.kt)("inlineCode",{parentName:"p"},"notFound")," will not since ",(0,r.kt)("inlineCode",{parentName:"p"},"omitFields: true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"notFound")," is not annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLField()"),". The type implements the interface specified in the annotation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type ClassConfig2 implements ClassConfig2Interface {\n  value: String!\n  valueOverridden: String\n  renamedValue2: String!\n}\n")),(0,r.kt)("p",null,"The following class uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"nullableFields")," parameter to override the default nullability type inference. When true, all fields will be nullable by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLObject(nullableFields: true, name: 'RenamedClassConfig')\nclass ClassConfig {\n  @GraphQLDocumentation(deprecationReason: 'value deprecated')\n  @GraphQLField()\n  final String value;\n  final String valueOverridden;\n  final String? valueNull;\n  @GraphQLField(nullable: true)\n  final String value2;\n\n  ClassConfig({\n    required this.value2,\n    required this.value,\n    required this.valueOverridden,\n    this.valueNull,\n  });\n}\n")),(0,r.kt)("p",null,"The previous Dart code will generate a GraphQL Object Type with the following definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type RenamedClassConfig {\n  value: String! @deprecated(reason: "value deprecated")\n  valueOverridden: String\n  valueNull: String\n  value2: String\n}\n')),(0,r.kt)("h4",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"You may use abstract classes to specify that a given class annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLObject()")," should generate a GraphQLInterface. Implemented classes that generate GraphQLInterfaces will appear as an interface of a the generated Object or Interface."),(0,r.kt)("p",null,"The following annotated Dart classes show the behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLObject()\nabstract class NestedInterface {\n  Decimal get dec;\n}\n\n@GraphQLObject()\nabstract class NamedInterface {\n  String? get name;\n}\n\n@GraphQLObject()\nclass NestedInterfaceImpl implements NestedInterface {\n  @override\n  final Decimal dec;\n\n  final String? name;\n\n  NestedInterfaceImpl(this.name, this.dec);\n}\n\n@GraphQLObject()\nclass NestedInterfaceImpl2 implements NestedInterfaceImpl {\n  @override\n  final Decimal dec;\n\n  @override\n  final String? name;\n  final String name2;\n\n  NestedInterfaceImpl2({\n    required this.dec,\n    required this.name,\n    required this.name2,\n  });\n}\n\n@GraphQLObject()\nclass NestedInterfaceImpl3 extends NestedInterfaceImpl\n    implements NamedInterface {\n  final String name3;\n\n  NestedInterfaceImpl3({\n    required Decimal dec,\n    required String? name,\n    required this.name3,\n  }) : super(name, dec);\n}\n")),(0,r.kt)("p",null,"Will generate the following GraphQL definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface NestedInterface {\n  dec: Decimal!\n}\n\ninterface NamedInterface {\n  name: String\n}\n\ntype NestedInterfaceImpl implements NestedInterface {\n  dec: Decimal!\n  name: String\n}\n\ntype NestedInterfaceImpl2 implements NestedInterface {\n  dec: Decimal!\n  name: String\n  name2: String!\n}\n\ntype NestedInterfaceImpl3 implements NamedInterface & NestedInterface {\n  name3: String!\n  dec: Decimal!\n  name: String\n}\n")),(0,r.kt)("h3",{id:"graphqlunion"},"GraphQLUnion"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto#unions"},"Unions")," allow you to specify that a given value can be one of multiple possible objects. For code generation we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/freezed"},"freezed"),"-like unions where factory constructors specify the different properties for the different objects. Other annotations such as ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLField()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLDocumentation()")," and freezed's ",(0,r.kt)("inlineCode",{parentName:"p"},"@Default")," will also work as shown in the example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLObject()\n@freezed\nclass UnionA with _$UnionA {\n  const factory UnionA.a1({\n    // five with default\n    @Default(5) int one,\n  }) = _UnionA1;\n\n  const factory UnionA.a2({\n    @JsonKey(fromJson: decimalFromJson, toJson: decimalToJson)\n    @Deprecated('custom deprecated msg')\n    Decimal? dec,\n  }) = _UnionA2;\n\n  const factory UnionA.a3({\n    @GraphQLDocumentation(description: 'description for one') List<int>? one,\n  }) = UnionA3;\n\n  const factory UnionA.a4({\n    @GraphQLField(name: 'oneRenamed') required List<int> one,\n  }) = _UnionA4;\n\n  factory UnionA.fromJson(Map<String, Object?> json) => _$UnionAFromJson(json);\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'union UnionA = UnionA1 | UnionA2 | UnionA3 | UnionA4\n\ntype UnionA1 {\n  """five with default"""\n  one: Int!\n}\n\ntype UnionA2 {\n  dec: Decimal @deprecated(reason: "custom deprecated msg")\n}\n\ntype UnionA3 {\n  """description for one"""\n  one: [Int!]\n}\n\ntype UnionA4 {\n  oneRenamed: [Int!]!\n}\n')),(0,r.kt)("p",null,"If you don't use ",(0,r.kt)("inlineCode",{parentName:"p"},"package:freezed"),", your can still generate unions with the same Dart definition, but actually defining the constructors for each possible object in the union:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"GraphQLAttachments unionNoFreezedAttachments() => const [ElementComplexity(50)];\n\n@AttachFn(unionNoFreezedAttachments)\n@GraphQLDocumentation(\n  description: '''\nDescription from annotation.\n\nUnion generated from raw Dart classes''',\n)\n@GraphQLUnion(name: 'UnionNoFreezedRenamed')\nclass UnionNoFreezed {\n  const factory UnionNoFreezed.a(String value) = UnionNoFreezedA.named;\n  const factory UnionNoFreezed.b(int value) = UnionNoFreezedB;\n}\n\n@GraphQLObject()\nclass UnionNoFreezedA implements UnionNoFreezed {\n  final String value;\n\n  const UnionNoFreezedA.named(this.value);\n}\n\n@GraphQLObject()\nclass UnionNoFreezedB implements UnionNoFreezed {\n  final int value;\n\n  const UnionNoFreezedB(this.value);\n}\n\n@Query()\nList<UnionNoFreezed> getUnionNoFrezzed() {\n  return const [UnionNoFreezed.a('value'), UnionNoFreezed.b(12)];\n}\n")),(0,r.kt)("p",null,"Which generates code for the following GraphQL definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nDescription from annotation.\n\nUnion generated from raw Dart classes\n"""\nunion UnionNoFreezedRenamed @cost(complexity: 50) = UnionNoFreezedA | UnionNoFreezedB\n\ntype UnionNoFreezedA {\n  value: String!\n}\n\ntype UnionNoFreezedB {\n  value: Int!\n}\n')),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("p",null,"Annotations for GraphQL Input Types."),(0,r.kt)("h3",{id:"graphqlinput"},"GraphQLInput"),(0,r.kt)("p",null,"Specifies that a given class should generate a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto#inputs-and-input-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLInputObject")),". All classes annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLInput()")," should provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"fromJson")," factory or static method as shown in the following examples. You can use packages such us ",(0,r.kt)("inlineCode",{parentName:"p"},"json_serializable")," to generate the serialization code."),(0,r.kt)("h3",{id:"graphqlarg"},"GraphQLArg"),(0,r.kt)("p",null,"This annotation allows you to specify a default value for Input types in the schema. The type with a default value should support de-serializing the provided default value or should be able to be serialized with a ",(0,r.kt)("inlineCode",{parentName:"p"},"toJson")," method. This will also work for arguments in resolvers as shown in the ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/annotations-decorators#resolver-inputs"},"Resolver Inputs")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLInput(name: 'InputMNRenamed')\nclass InputMN {\n  final String name;\n  final InputM? parent;\n  final Json json;\n  final List<Json> jsonListArgDef;\n  final List<List<InputM>?>? parentNullDef;\n\n  static List<List<InputM>?> parentNullDefDefault() => [\n        null,\n        [\n          const InputM(\n            name: 'defaultName',\n            nested: [],\n            nestedNullItem: [],\n            ints: [0, 0],\n            doubles: [0, 0.1],\n          )\n        ]\n      ];\n\n  const InputMN({\n    required this.name,\n    this.parent,\n    this.json = const JsonList([JsonNumber(1)]),\n    @GraphQLArg(defaultCode: 'const [JsonMap({})]')\n    required this.jsonListArgDef,\n    @GraphQLArg(defaultFunc: parentNullDefDefault) this.parentNullDef,\n  });\n\n  factory InputMN.fromJson(Map<String, Object?> json) {\n    return InputMN(\n      name: json['name']! as String,\n      parent: json['parent'] != null\n          ? InputM.fromJson(json['parent']! as Map<String, Object?>)\n          : null,\n      json: Json.fromJson(json['json']),\n      jsonListArgDef: List.of(\n        (json['jsonListArgDef'] as List).map(\n          (Object? e) => Json.fromJson(e),\n        ),\n      ),\n      parentNullDef: json['parentNullDef'] != null\n          ? List.of(\n              (json['parentNullDef']! as List<Object?>).map(\n                (e) => e == null\n                    ? null\n                    : List.of(\n                        (e as List<Object?>).map(\n                          (e) => InputM.fromJson(e as Map<String, Object?>),\n                        ),\n                      ),\n              ),\n            )\n          : null,\n    );\n  }\n\n  Map<String, Object?> toJson() => {\n        'name': name,\n        'parent': parent,\n        'json': json,\n        'jsonListArgDef': jsonListArgDef,\n        if (parentNullDef != null) 'parentNullDef': parentNullDef,\n      };\n}\n")),(0,r.kt)("p",null,"Generic input types are supported. However the API may change in the future. Your ",(0,r.kt)("inlineCode",{parentName:"p"},"fromJson")," method should have generic argument factories as parameters, functions that return the generic instance from a serialized value. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@JsonSerializable(genericArgumentFactories: true)")," if using ",(0,r.kt)("inlineCode",{parentName:"p"},"json_serializable")," as shown in the example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLInput()\n@JsonSerializable(genericArgumentFactories: true)\nclass InputGen<T> {\n  final String name;\n  final T generic;\n\n  const InputGen({\n    required this.name,\n    required this.generic,\n  });\n\n  factory InputGen.fromJson(\n    Map<String, Object?> json,\n    T Function(Object?) fromJsonT,\n  ) =>\n      _$InputGenFromJson(json, fromJsonT);\n\n  Map<String, Object?> toJson() => {'name': name, 'generic': generic};\n}\n")),(0,r.kt)("h3",{id:"resolver-inputs"},"Resolver Inputs"),(0,r.kt)("p",null,"// TODO: 1G ",(0,r.kt)("inlineCode",{parentName:"p"},"@FromCtx()")," Type.fromCtx;"),(0,r.kt)("p",null,"Authentication (admin|role);"),(0,r.kt)("p",null,"For resolvers, you just specify the type that you want as input and the input GraphQL type will be included in the generated field definition.  You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLArg()")," annotation to specify a default value or specify the default value directly in the dart code if it can be a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," Dart definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"List<Decimal?> _defaultListDecimalNull() => [null, Decimal.parse('2')];\n\nGraphQLType<dynamic, dynamic> _timestampsType() =>\n    graphQLTimestamp.list().nonNull();\n\n@GraphQLEnum()\nenum EnumValue { v1, v2, v3 }\n\nfinal enumCustomGraphQLType = enumType<int>(\n  'EnumCustom',\n  {\n    'TWO': 2,\n    'THREE': 3,\n  },\n);\n\nconst testManyDefaultsGraphQLStr =\n    'testManyDefaults(str: String! = \"def\", intInput: Int! = 2,'\n    ' doubleInput: Float! = 3.0, doubleInputNull: Float = 4.2,'\n    ' boolean: Boolean! = true, listStr: [String!]! = [\"dw\", \"dd2\"],'\n    ' listDecimalNull: [Decimal] = [null, \"2\"],'\n    ' listUri: [Uri!]! = [\"http://localhost:8060/\"],'\n    ' date: Date! = \"2021-03-24T00:00:00.000\",'\n    ' gen: InputGenIntReq = {name: \"gen\", generic: 2},'\n    ' enumValue: EnumValue! = v1, enumCustom: EnumCustom = THREE,'\n    ' enumCustomList: [EnumCustom!]! = [TWO],'\n    ' timestamps: [Timestamp]! = [1611446400000, null],'\n    ' json: Json! = {d: [2]}): String!';\n\n@Query()\nString testManyDefaults({\n  String str = 'def',\n  int intInput = 2,\n  double doubleInput = 3,\n  double? doubleInputNull = 4.2,\n  bool boolean = true,\n  List<String> listStr = const ['dw', 'dd2'],\n  @GraphQLArg(defaultFunc: _defaultListDecimalNull)\n  List<Decimal?>? listDecimalNull,\n  @GraphQLArg(defaultCode: \"[Uri.parse('http://localhost:8060/')]\")\n  required List<Uri> listUri,\n  @GraphQLArg(defaultCode: 'DateTime.parse(\"2021-03-24\")')\n  required DateTime date,\n  @GraphQLArg(defaultCode: \"InputGen(name: 'gen', generic: 2)\")\n  InputGen<int>? gen,\n  EnumValue enumValue = EnumValue.v1,\n  @GraphQLDocumentation(typeName: 'enumCustomGraphQLType') int enumCustom = 3,\n  @GraphQLDocumentation(\n    typeName: 'enumCustomGraphQLType.nonNull().list().nonNull()',\n  )\n  List<int> enumCustomList = const [2],\n  @GraphQLArg(\n    defaultCode: '[DateTime.fromMillisecondsSinceEpoch(1611446400000), null]',\n  )\n  @GraphQLDocumentation(type: _timestampsType)\n  required List<DateTime?> timestamps,\n  Json json = const Json.map({\n    'd': Json.list([Json.number(2)])\n  }),\n}) {\n")),(0,r.kt)("h2",{id:"other"},"Other"),(0,r.kt)("p",null,"Other miscellaneous decorators include the general ",(0,r.kt)("a",{parentName:"p",href:"#graphqldocumentation"},(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLDocumentation")),", ",(0,r.kt)("a",{parentName:"p",href:"#graphqlenum"},(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLEnum"))," to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLEnumType")," and ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/annotations-decorators#attachfn"},(0,r.kt)("inlineCode",{parentName:"a"},"AttachFn"))," to specify attachments."),(0,r.kt)("h3",{id:"graphqldocumentation"},"GraphQLDocumentation"),(0,r.kt)("p",null,"Dart comments for all elements will be taken as the description in the generated GraphQLType or Field. Also, Dart's ",(0,r.kt)("inlineCode",{parentName:"p"},"@Deprecated()")," annotation can be used for setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"deprecationReason")," for fields, input fields, arguments and enum values. Another way, which will override the previous two, is by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLDocumentation()")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"deprecationReason")," params."),(0,r.kt)("p",null,"The GraphQLType of a field, input field, argument or class can be configured using the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," params. More information in the ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/dart-type-to-graphqltype-coercion#graphqldocumentationtype-function-typename-string"},"GraphQLDocumentation type parameters section"),"."),(0,r.kt)("h3",{id:"graphqlenum"},"GraphQLEnum"),(0,r.kt)("p",null,"Enums work as expected using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLEnum()")," annotation. The ",(0,r.kt)("inlineCode",{parentName:"p"},"valuesCase")," parameter can be used to specify the case of the generated GraphQL enum definition. Some example of simple enums:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"/// comments for docs\n@GraphQLEnum(name: 'SimpleEnumRenamed')\nenum SimpleEnum {\n  @AttachFn(simpleVariantAttachments)\n  simpleVariantOne,\n\n  SIMPLE_VARIANT_TWO,\n}\n\nGraphQLAttachments simpleVariantAttachments() => const [CustomAttachment()];\n\n@GraphQLEnum(valuesCase: EnumNameCase.snake_case)\nenum SnakeCaseEnum {\n  @GraphQLDocumentation(description: 'description from annotation')\n  @Deprecated('custom deprecated')\n  variantOne,\n\n  /// Documentation for variant two\n  variantTwo,\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SimpleEnum")," Dart enum will generate the following GraphQL definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'enum ClassEnum @cost(complexity: 2) {\n  VARIANT_ONE\n\n  """The second variant docs"""\n  VARIANT_TWO\n  errorRenamed\n}\n')),(0,r.kt)("p",null,"And the ",(0,r.kt)("inlineCode",{parentName:"p"},"SnakeCaseEnum")," Dart enum will generate the following GraphQL definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'enum SnakeCaseEnum {\n  """description from annotation"""\n  variant_one @deprecated(reason: "custom deprecated")\n\n  """Documentation for variant two"""\n  variant_two\n}\n')),(0,r.kt)("p",null,"You can also provide a custom enum class, you will need to annotate each static variant with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLEnumVariant()")," decorator and have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Class.values")," static getter. All variants should be of the same type as the Enum class. An example of this is shown in the following code snippet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"GraphQLAttachments classEnumAttachments() => const [ElementComplexity(2)];\n\n@AttachFn(classEnumAttachments)\n@GraphQLEnum(valuesCase: EnumNameCase.CONSTANT_CASE)\n@immutable\nclass ClassEnum {\n  final int code;\n  final bool isError;\n\n  const ClassEnum._(this.code, this.isError);\n\n  @GraphQLEnumVariant()\n  static const variantOne = ClassEnum._(100, false);\n\n  /// The second variant docs\n  @GraphQLEnumVariant()\n  static const variantTwo = ClassEnum._(201, false);\n  @GraphQLEnumVariant(name: 'errorRenamed')\n  @AttachFn(variantErrorAttachments)\n  static const variantErrorThree = ClassEnum._(300, true);\n\n  static GraphQLAttachments variantErrorAttachments() =>\n      const [CustomAttachment()];\n\n  static const List<ClassEnum> values = [\n    variantOne,\n    variantTwo,\n    variantErrorThree,\n  ];\n\n  @override\n  bool operator ==(Object other) {\n    if (identical(this, other)) return true;\n\n    return other is ClassEnum && other.code == code && other.isError == isError;\n  }\n\n  @override\n  int get hashCode => code.hashCode ^ isError.hashCode;\n}\n")),(0,r.kt)("h3",{id:"attachfn"},"AttachFn"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AttachFn")," decorator over a class, field or function or argument to specify ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/attachments"},"Attachments")," for a GraphQLElement. You pass a function that returns a list of attachments. More documentation on the usage can be found in ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/attachments#attachfn-for-code-generation"},"usage for code generation"),"."),(0,r.kt)("h3",{id:"generics"},"Generics"),(0,r.kt)("p",null,"You can use generics with code generation. For example a simple wrapper around an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLObject()\nclass ErrCodeInterface<T extends Object> {\n  final String? message;\n  final T code;\n\n  const ErrCodeInterface(this.code, [this.message]);\n}\n")),(0,r.kt)("p",null,"Will generate something a function that returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType")," with the generic as a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType")," passed as argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final _types =\n    HotReloadableDefinition<Map<String, GraphQLObjectType<ErrCodeInterface>>>(\n        (_) => {});\n\n/// Auto-generated from [ErrCodeInterface].\nGraphQLObjectType<ErrCodeInterface<T>>\n    errCodeInterfaceGraphQLType<T extends Object>(\n  GraphQLType<T, Object> tGraphQLType, {\n  String? name,\n}) {\n  final __name = name ?? 'ErrCodeInterface${tGraphQLType.printableName}';\n  if (_types.value[__name] != null) {\n    return _types.value[__name]! as GraphQLObjectType<ErrCodeInterface<T>>;\n  }\n  final __types = objectType<ErrCodeInterface<T>>(\n    __name,\n    isInterface: false,\n    interfaces: [],\n  );\n\n  _types.value[__name] = __types;\n  __types.fields.addAll(\n    [\n      graphQLString.field('message', resolve: (obj, ctx) => obj.message),\n      tGraphQLType.nonNull().field('code', resolve: (obj, ctx) => obj.code),\n    ],\n  );\n\n  return __types;\n}\n")),(0,r.kt)("p",null,"It also has an optional name property to override the default generic name that is constructed\nfrom the base name and the generic ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType"),"s. This name can be used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"genericTypeName"),".\n//TODO: 2G genericTypeName should be usable in other situations. Maybe fields or in ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLDocumentation")," for all"),(0,r.kt)("h4",{id:"generics-input"},"Generics Input"),(0,r.kt)("p",null,"You can also use generics for inputs like the following example. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromJson")," factory should receive a\nfunction that parses the generic values (as many function as there are generic type parameters)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@GraphQLInput()\n@JsonSerializable(genericArgumentFactories: true)\nclass InputGen<T> {\n  final String name;\n  final T generic;\n\n  const InputGen({\n    required this.name,\n    required this.generic,\n  });\n\n  factory InputGen.fromJson(\n    Map<String, Object?> json,\n    T Function(Object?) fromJsonT,\n  ) =>\n      _$InputGenFromJson(json, fromJsonT);\n\n  Map<String, Object?> toJson() => {'name': name, 'generic': generic};\n}\n")))}c.isMDXComponent=!0}}]);