"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3019],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5151:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:12},o="Directives",l={unversionedId:"main/directives",id:"main/directives",title:"Directives",description:"For more information: GraphQL specification",source:"@site/docs/main/directives.md",sourceDirName:"main",slug:"/main/directives",permalink:"/leto/docs/main/directives",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Extensions",permalink:"/leto/docs/main/extensions"},next:{title:"Attachments",permalink:"/leto/docs/main/attachments"}},s={},p=[{value:"<code>KeyDirective</code>",id:"keydirective",level:2},{value:"<code>ValidaDirective</code>",id:"validadirective",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"directives"},"Directives"),(0,r.kt)("p",null,"For more information: ",(0,r.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Type-System.Directives"},"GraphQL specification")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto_schema/lib/src/directive.dart"},(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLDirective"))," allows you to provide more information about different elements of your schema and queries."),(0,r.kt)("p",null,"The default skip, include, deprecated and specifiedBy directives are provided. Fields in the different type system definition classes allow you to include the deprecated reason for fields or enum values, and a url of the specification for scalar types. This information will be printed when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"printSchema")," utility, can be retrieved in Dart through GraphQL extension for modifying the behavior of request execution or, if introspection is enabled, will be exposed by the GraphQL server."),(0,r.kt)("p",null,"The skip and include directives are supported during document execution following the spec. Right now, custom directives on execution can be obtained by using the parsed ",(0,r.kt)("inlineCode",{parentName:"p"},"DocumentNode")," from package:gql, in the future better support could be implemented."),(0,r.kt)("p",null,"Provide custom directives supported by your server through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLSchema.directives")," field."),(0,r.kt)("p",null,"You can retrieve custom directives values in your GraphQL Schema definition when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"buildSchema")," utility, which will parse all directives and leave them accessible through the ",(0,r.kt)("inlineCode",{parentName:"p"},"astNode")," Dart fields in the different GraphQL elements. Setting custom directives values through the GraphQL Schema Dart classes is a work in progress. Right now, you can add ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectiveNode"),"s to the element's ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/attachments"},"attachments")," if you want to print it with ",(0,r.kt)("inlineCode",{parentName:"p"},"printSchema"),", however the API will probably change. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphql-js/issues/1343"},"https://github.com/graphql/graphql-js/issues/1343")),(0,r.kt)("h2",{id:"keydirective"},(0,r.kt)("inlineCode",{parentName:"h2"},"KeyDirective")),(0,r.kt)("p",null,"Specifies that a given Object can be identified by the fields\npassed as argument to the directive"),(0,r.kt)("p",null,"It is repeatable, there can be multiple keys per Object."),(0,r.kt)("p",null,'The following example shows an Object that can be identified by two keys,\nthe "id" field and the combination "type" and "nested.value" fields.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Model @key(fields: "id") @key(fields: "type nested { value } ") {\n  id: String!\n  type: String!\n  nested {\n    value: int!\n  }\n}\n')),(0,r.kt)("h2",{id:"validadirective"},(0,r.kt)("inlineCode",{parentName:"h2"},"ValidaDirective")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:valida"),", the valida directive represents the validation configuration. At the moment the ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidaField")," annotation over arguments and input fields is used to populated the valida directive. For example, the following annotated ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLInput")," that verifies that all lengths inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"strs")," field have at least 1 byte length:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@Valida()\n@GraphQLInput()\nclass ValidaArgModel {\n  @ValidaList(each: ValidaString(minLength: 1))\n  final List<String> strs;\n  final ValidaArgModel? inner;\n\n  ValidaArgModel({\n    required this.strs,\n    this.inner,\n  });\n\n  Map<String, Object?> toJson() {\n    return {\n      'strs': strs,\n      'inner': inner?.toJson(),\n    };\n  }\n\n  factory ValidaArgModel.fromJson(Map<String, Object?> map) {\n    return ValidaArgModel(\n      strs: List<String>.from(map['strs']! as List),\n      inner: map['inner'] != null\n          ? ValidaArgModel.fromJson((map['inner']! as Map).cast())\n          : null,\n    );\n  }\n}\n")),(0,r.kt)("p",null,"Will generate the following GraphQL definition with valida directive."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'input ValidaArgModel {\n  strs: [String!]! @valida(jsonSpec: """\n{"variantType":"list","each":{"variantType":"string","minLength":1}}\n""")\n  inner: ValidaArgModel\n}\n')),(0,r.kt)("p",null,'In this case the JSON \'{"variantType":"list","each":{"variantType":"string","minLength":1}}\' is the result of executing the annotation\'s (',(0,r.kt)("inlineCode",{parentName:"p"},"ValidaList(each: ValidaString(minLength: 1))"),") toJson method."))}c.isMDXComponent=!0}}]);