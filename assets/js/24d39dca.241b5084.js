"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9930],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||a;return t?o.createElement(h,i(i({ref:n},d),{},{components:t})):o.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1537:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:6},i="Unions",l={unversionedId:"graphql-schema-types/unions",id:"graphql-schema-types/unions",title:"Unions",description:"Similar to enums, Unions are restricted to a set of predefined variants, however the possible types are always the more complex GraphQLObjectType.",source:"@site/docs/graphql-schema-types/unions.md",sourceDirName:"graphql-schema-types",slug:"/graphql-schema-types/unions",permalink:"/leto/docs/graphql-schema-types/unions",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Inputs and Input Objects",permalink:"/leto/docs/graphql-schema-types/inputs-and-input-objects"},next:{title:"Wrapping Types",permalink:"/leto/docs/graphql-schema-types/wrapping-types"}},p={},s=[{value:"Freezed Unions",id:"freezed-unions",level:3}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"unions"},"Unions"),(0,r.kt)("p",null,"Similar to enums, Unions are restricted to a set of predefined variants, however the possible types are always the more complex ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),"."),(0,r.kt)("p",null,"Per the GraphQL spec, Unions can't be (or be part of) Input types and their possible types is a non empty collection of unique ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Unions"},"GraphQL Specification")),(0,r.kt)("p",null,"To have the following GraphQL type definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'union ModelEvent = ModelAdded | ModelRemoved\n\ntype ModelRemoved {\n  "The removed model id"\n  modelId: ID!\n}\n\ntype ModelAdded {\n  model: Model!\n}\n\ntype Model {\n  id: ID!\n}\n')),(0,r.kt)("p",null,"You could provide this definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:leto_schema/leto_schema.dart';\n\nfinal model = objectType(\n  'Model',\n  fields: [\n      graphQLIdType.nonNull().field('id'),\n  ],\n);\nfinal modelAddedGraphQLType = objectType(\n  'ModelAdded',\n  fields: [model.nonNull().field('model')],\n);\nfinal modelRemovedGraphQLType = objectType(\n  'ModelRemoved',\n  fields: [graphQLIdType.nonNull().field('modelId')],\n);\n\nfinal union = GraphQLUnionType(\n  // name\n  'ModelEvent',\n  // possibleTypes\n  [\n      modelAddedGraphQLType,\n      modelRemovedGraphQLType,\n  ],\n);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extractInner"))),(0,r.kt)("p",null,"When the members of the union type are not"),(0,r.kt)("h3",{id:"freezed-unions"},"Freezed Unions"),(0,r.kt)("p",null,"With code generation, Unions with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/freezed"},"freezed")," also work without trouble."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:leto_schema/leto_schema.dart';\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\n@GraphQLObject()\nclass Model {\n  final String id;\n\n  const Model(this.id);\n}\n\n@GraphQLObject()\n@freezed\nclass ModelEvent with _$ModelEvent {\n  const factory ModelEvent.added(Model model) = ModelAdded;\n  const factory ModelEvent.removed(\n    @GraphQLDocumentation(type: 'graphQLIdType', description: 'The removed model id')\n    String modelId,\n    // you can also provide a private class\n  ) = _ModelRemoved;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"GraphQLAttachments unionNoFreezedAttachments() => const [ElementComplexity(50)];\n\n@AttachFn(unionNoFreezedAttachments)\n@GraphQLDocumentation(\n  description: '''\nDescription from annotation.\n\nUnion generated from raw Dart classes''',\n)\n@GraphQLUnion(name: 'UnionNoFreezedRenamed')\nclass UnionNoFreezed {\n  const factory UnionNoFreezed.a(String value) = UnionNoFreezedA.named;\n  const factory UnionNoFreezed.b(int value) = UnionNoFreezedB;\n}\n\n@GraphQLObject()\nclass UnionNoFreezedA implements UnionNoFreezed {\n  final String value;\n\n  const UnionNoFreezedA.named(this.value);\n}\n\n@GraphQLObject()\nclass UnionNoFreezedB implements UnionNoFreezed {\n  final int value;\n\n  const UnionNoFreezedB(this.value);\n}\n\n@Query()\nList<UnionNoFreezed> getUnionNoFrezzed() {\n  return const [UnionNoFreezed.a('value'), UnionNoFreezed.b(12)];\n}\n")))}c.isMDXComponent=!0}}]);