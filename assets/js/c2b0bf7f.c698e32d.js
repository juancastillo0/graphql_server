"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7306],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,y=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(y,l(l({ref:t},c),{},{components:r})):a.createElement(y,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4687:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:2},l="Scalars",s={unversionedId:"graphql-schema-types/scalars",id:"graphql-schema-types/scalars",title:"Scalars",description:"The fundamental building-block in the type system. Standard GraphQLScalarTypes: String, Int, Float, Boolean and ID types are already implemented and provided by Leto.",source:"@site/docs/graphql-schema-types/scalars.md",sourceDirName:"graphql-schema-types",slug:"/graphql-schema-types/scalars",permalink:"/leto/docs/graphql-schema-types/scalars",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"GraphQL Schema Types",permalink:"/leto/docs/graphql-schema-types/"},next:{title:"Enums",permalink:"/leto/docs/graphql-schema-types/enums"}},o={},p=[],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"scalars"},"Scalars"),(0,n.kt)("p",null,"The fundamental building-block in the type system. Standard ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLScalarType"),"s: String, Int, Float, Boolean and ID types are already implemented and provided by Leto."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Scalars"},"GraphQL Specification")),(0,n.kt)("p",null,"Other scalar types are also provided:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Json: A raw JSON value with no type schema. Could be a Map<String, Json",">",", List<Json",">",", num, String, bool or null."),(0,n.kt)("li",{parentName:"ul"},"Uri: Dart's Uri class, serialized using ",(0,n.kt)("inlineCode",{parentName:"li"},"Uri.toString")," and deserialized with ",(0,n.kt)("inlineCode",{parentName:"li"},"Uri.parse")),(0,n.kt)("li",{parentName:"ul"},"Date: Uses the ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime")," Dart class. Serialized as an ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO-8601")," String and deserialized with ",(0,n.kt)("inlineCode",{parentName:"li"},"DateTime.parse"),"."),(0,n.kt)("li",{parentName:"ul"},"Timestamp: Same as Date, but serialized as an UNIX timestamp."),(0,n.kt)("li",{parentName:"ul"},"Time: // TODO: 1A"),(0,n.kt)("li",{parentName:"ul"},"Duration: // TODO: 1A"),(0,n.kt)("li",{parentName:"ul"},"BigInt: An arbitrarily large integer from ",(0,n.kt)("a",{parentName:"li",href:"https://api.dart.dev/stable/dart-core/BigInt-class.html"},(0,n.kt)("inlineCode",{parentName:"a"},"dart:core"))," serialized as a String and deserialized with ",(0,n.kt)("inlineCode",{parentName:"li"},"BigInt.parse"),"."),(0,n.kt)("li",{parentName:"ul"},"Upload: A file upload. Following the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/jaydenseric/graphql-multipart-request-spec"},"multipart request spec"),".")),(0,n.kt)("p",null,"To provide your own or support types from other packages you can use ",(0,n.kt)("a",{parentName:"p",href:"/leto/docs/graphql-schema-types/advanced-types#custom-scalars"},"Custom Scalars"),"."))}u.isMDXComponent=!0}}]);